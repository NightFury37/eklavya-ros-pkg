<?xml version="1.0"?>

<robot
  xmlns:sensor="http://playerstage.sourceforge.net/gazebo/xmlschema/#sensor"
  xmlns:controller="http://playerstage.sourceforge.net/gazebo/xmlschema/#controller"
  xmlns:interface="http://playerstage.sourceforge.net/gazebo/xmlschema/#interface">
<gazebo reference="castor">
    <mu1 value="0"/>
    <mu2 value="0"/>
    <kp value="100000000.0"/>
    <kd value="10000.0"/>
    <fdir value="1 0 0"/>
  </gazebo>
  
  <macro name="gazebo_eklavya_base_link_surface">
    <gazebo reference="base_link">
      <mu1 value="100.0" />
      <mu2 value="100.0" />
      <kp  value="1000000.0" />
      <kd  value="1.0" />
    </gazebo>
  </macro>

  <macro name="gazebo_segbot_castor_wheel_link_surface">
    <gazebo reference="caster_wheel_link">
      <mu1 value="10.0" />
      <mu2 value="10.0" />
      <kp  value="1000000.0" />
      <kd  value="1.0" />
    </gazebo>
  </macro>

  <macro name="eklavya_base_link_mesh">
    <origin xyz="0 0 0" rpy="0 0 0" />
    <geometry>
     <!-- <mesh filename="package://eklavya_description/meshes/rmp50-base-link.dae" scale="0.0254 0.0254 0.0254"/> -->
    <box size=".55 .55 .55"/>
    </geometry>
     <material name="GunMetalBrushedAluminum"/>  
  </macro>



  <macro name="eklavya_castor_wheel_link_mesh">
    <origin xyz="0 0 0" rpy="0 0 0" />
    <geometry>
      <mesh filename="package://eklavya_description/meshes/rmp50-castor-wheel.dae" scale="0.0254 0.0254 0.0254"/>
    </geometry>
  </macro>

  <macro name="segbot_collision_none">
    <origin xyz="0 0 0" rpy="0 0 0" />
    <geometry>
      <box size="0.01 0.01 0.01" />
    </geometry>
  </macro>

  <macro name="eklavya_castor_support_link_mesh">
    <origin xyz="0 0 0" rpy="0 0 0" />
    <geometry>
      <mesh filename="package://eklavya_description/meshes/rmp50-castor-link.dae" scale="0.0254 0.0254 0.0254"/>
    </geometry>
  </macro>

  <macro name="segbot_wheel_mesh" params="suffix">
    <origin xyz="0 0 0" rpy="0 0 0" />
    <geometry>
      <mesh filename="package://eklavya_description/meshes/rmp50-${suffix}-wheel.dae" scale="0.0150 0.0150 0.0150"/>
    </geometry>
  </macro>

  <macro name="gazebo_segbot_wheel_surface">
    <gazebo reference="${parent}_${suffix}_wheel_link" >
      <mu1 value="10.0" />
      <mu2 value="10.0" />
      <kp  value="1000000.0" />
      <kd  value="1.0" />
    </gazebo>
  </macro>

  <macro name="gazebo_segbot_controllers_common">
    <canonicalBody>base_footprint</canonicalBody>
    <controller:gazebo_ros_controller_manager name="gazebo_ros_controller_manager" plugin="libgazebo_ros_controller_manager.so">
      <alwaysOn>true</alwaysOn>
      <updateRate>5.0</updateRate>
      <interface:audio name="gazebo_ros_controller_manager_dummy_iface" />
    </controller:gazebo_ros_controller_manager>
  </macro>

  <macro name="gazebo_segbot_drive_parameters">
    <alwaysOn>true</alwaysOn>
    <update>100</update>
    <updateRate>100.0</updateRate>
    <leftJoint>base_link_right_wheel_joint</leftJoint>
    <rightJoint>base_link_left_wheel_joint</rightJoint>
    <wheelSeparation>0.5380</wheelSeparation>
    <wheelDiameter>0.2410</wheelDiameter>
    <torque>20</torque>
    <interface:position name="position_iface_0"/>
    <topicName>cmd_vel</topicName>
  </macro>

  <macro name="gazebo_segbot_simple_drive_plugin">
    <controller:segbotsimpledrive_plugin name="differential_drive_controller" plugin="libsegbotsimpledrive_plugin.so">
      <gazebo_segbot_drive_parameters />
    </controller:segbotsimpledrive_plugin>
  </macro>

  <macro name="gazebo_segbot_drive_plugin">
    <controller:segbotdrive_plugin name="differential_drive_controller" plugin="libsegbotdrive_plugin.so">
      <gazebo_segbot_drive_parameters />
    </controller:segbotdrive_plugin>
   </macro>

 <!-- CONTROLLERS -->
 <macro name="gazebo_segbot_drive_plugin2">
        <gazebo>
            <controller:diffdrive_plugin name="differential_drive_controller" plugin="libdiffdrive_plugin.so">
                <alwaysOn>true</alwaysOn>
                <update>100</update>
                <updateRate>100.0</updateRate>
                <leftJoint>base_link_right_wheel_joint</leftJoint>
                <rightJoint>base_link_left_wheel_joint</rightJoint>
                <wheelSeparation>${caster_wheel_offset_y*2}</wheelSeparation>
                <wheelDiameter>${wheel_radius*2}</wheelDiameter>
                <torque>50</torque>
                <interface:position name="position_iface_0"/>
                <robotNamespace>/</robotNamespace>
                <topicName>cmd_vel</topicName>
            </controller:diffdrive_plugin>

            <controller:gazebo_ros_p3d name="p3d_base_controller" plugin="libgazebo_ros_p3d.so">
                <alwaysOn>true</alwaysOn>
                <updateRate>100.0</updateRate>
                <bodyName>base_link</bodyName>
                <topicName>base_pose_ground_truth</topicName>
                <gaussianNoise>0.01</gaussianNoise>
                <frameName>map</frameName>
                <xyzOffsets>0 0 0</xyzOffsets> 
                <rpyOffsets>0 0 0</rpyOffsets>
                <interface:position name="p3d_base_position"/>
            </controller:gazebo_ros_p3d>

            <canonicalBody>base_footprint</canonicalBody>

            <!-- this publishes empty joint_states due to no transmission, but
             triggering robot_state_publisher to publish tf between fixed joints in create,
             (e.g. base_laser_link for the base_scan frame) -->
            <controller:gazebo_ros_controller_manager name="gazebo_ros_controller_manager" plugin="libgazebo_ros_controller_manager.so">
                <alwaysOn>true</alwaysOn>
                <updateRate>100.0</updateRate>
                <interface:audio name="gazebo_ros_controller_manager_dummy_iface" />
            </controller:gazebo_ros_controller_manager>
        </gazebo>
  </macro>
</robot>

<launch>
   <param name="robot_description" command="$(find xacro)/xacro.py '$(find eklavya_description)/urdf/eklavya.urdf.xacro'"/>
<!-- <param name="robot_description" textfile="$(find eklavya_description)/urdf/model.urdf"/>-->

  <node name="spawn_eklavya_model" pkg="gazebo" type="spawn_model" args="$(optenv ROBOT_INSTALL_POSE) -unpause -urdf -param robot_description -model eklavya_robot" respawn="false" output="screen"/>


 <!-- <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator" >
    <rosparam command="load" file="$(find turtlebot_bringup)/config/diagnostics.yaml" />
  </node>-->
  
  <node pkg="robot_state_publisher" type="state_publisher" name="robot_state_publisher" output="screen">
    <param name="publish_frequency" type="double" value="30.0" />
  </node>


  <!-- The odometry estimator -->

  <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
    <param name="output_frame" value="odom_combined"/>
    <param name="freq" value="30.0"/>
    <param name="sensor_timeout" value="1.0"/>  
    <param name="publish_tf" value="true"/> 
    <param name="odom_used" value="true"/>
    <param name="imu_used" value="true"/>
    <param name="vo_used" value="false"/>

    <param name="debug" value="true" />
    <param name="self_diagnose" value="false" />

    <remap from="imu_data" to="imu/data"/>
  </node>




  <!-- throttling -->
 <!--  <node pkg="nodelet" type="nodelet" name="pointcloud_throttle" args="load pointcloud_to_laserscan/CloudThrottle openni_manager" respawn="true">
    <param name="max_rate" value="20.0"/>
    <remap from="cloud_in" to="/camera/depth/points"/>
    <remap from="cloud_out" to="cloud_throttled"/>
  </node> -->

  <!-- Fake Laser -->
<!--   <node pkg="nodelet" type="nodelet" name="kinect_laser" args="load pointcloud_to_laserscan/CloudToScan openni_manager" respawn="true">
    <param name="output_frame_id" value="/camera_depth_frame"/> -->
    <!-- heights are in the (optical?) frame of the kinect -->
   <!--  <param name="min_height" value="-0.15"/>
    <param name="max_height" value="0.15"/>
    <remap from="cloud" to="/cloud_throttled"/>
  </node> -->

  <!-- Fake Laser (narrow one, for localization -->
 <!--  <node pkg="nodelet" type="nodelet" name="kinect_laser_narrow" args="load pointcloud_to_laserscan/CloudToScan openni_manager" respawn="true">
    <param name="output_frame_id" value="/camera_depth_frame"/>
    <param name="min_height" value="-0.025"/>
    <param name="max_height" value="0.025"/>
    <remap from="cloud" to="/cloud_throttled"/>
    <remap from="scan" to="/narrow_scan"/>
  </node> -->

<!-- Bring up two image viewer nodes for looking at the camera data -->

 <!--  <node name="image_view_COLOR" pkg="image_view" type="image_view" args="image:=/camera/rgb/image_color" >
  </node>

  <node name="image_view_DEPTH" pkg="image_view" type="image_view" args="image:=/camera/depth/image" >
  </node> -->

</launch>
